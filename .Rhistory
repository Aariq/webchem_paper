set.seed(0)
lab <- simmer("lab") %>%
add_resource("specialist",1) %>%
add_generator("Sample",sample, at(0)) %>%
run(100)
get_mon_arrivals(lab)
set.seed(0)
lab <- simmer("lab") %>%
add_resource("specialist",1) %>%
add_generator("Sample",sample, at(0)) %>%
run(100)
get_mon_arrivals(lab)
set.seed(0)
lab <- simmer("lab") %>%
add_resource("specialist",2) %>%
add_generator("Sample",sample, at(0)) %>%
run(100)
get_mon_arrivals(lab)
sample <- trajectory() %>%
seize("specialist") %>%
timeout(10) %>%
release("specialist")
set.seed(0)
lab <- simmer("lab") %>%
add_resource("specialist",2) %>%
add_generator("Sample",sample, at(rep(0,times=2))) %>%
run(100)
get_mon_arrivals(lab)
get_mon_resources(lab)
pH <- trajectory() %>%
#set_attribute("arrival_time",function(x) now(lab)) %>%
seize("specialist",1) %>%
seize("pH_meter",1) %>%
#set_attribute("start_time",function(x) now(lab)) %>%
timeout(10) %>%
release("pH_meter",1) %>%
release("specialist",1)#%>%
#set_attribute("end_time",function(x) now(lab))
set.seed(0)
lab <- simmer("lab") %>%
add_resource("specialist",2) %>%
#add_resource("pH_meter",1) %>%
add_generator("Sample",sample, at(rep(0,times=1))) %>%
run(100)
arrivals <- get_mon_arrivals(lab)%>%
transform(tot=round(end_time-start_time,2))
arrivals
get_mon_resources(lab)
sample <- trajectory() %>%
seize("specialist") %>%
timeout(10) %>%
release("specialist")
set.seed(0)
lab <- simmer("lab") %>%
add_resource("specialist",1) %>%
add_generator("Sample",sample, at(0)) %>%
run(100)
get_mon_arrivals(lab)
sample <- trajectory() %>%
clone(n=2,
trajectory() %>%
seize("specialist")%>%
timeout(10)%>%
release("specialist"),
trajectory() %>%
seize("specialist")%>%
timeout(5)%>%
release("specialist")) %>%
synchronize(wait=TRUE)
set.seed(0)
lab <- simmer("lab") %>%
add_resource("specialist",1) %>%
add_generator("Sample",sample, at(0)) %>%
run(100)
get_mon_arrivals(lab)
sample <- trajectory() %>%
clone(n=2,
trajectory() %>%
seize("specialist")%>%
timeout(10)%>%
release("specialist"),
trajectory() %>%
seize("specialist")%>%
timeout(5)%>%
release("specialist")) %>%
synchronize(wait=TRUE)
lab <- simmer("lab") %>%
add_resource("specialist",2) %>%
add_generator("Sample",sample, at(0)) %>%
run(100)
get_mon_arrivals(lab)
get_mon_resources(lab)
sample <- trajectory() %>%
clone(n=2,
trajectory() %>%
seize("specialist")%>%
timeout(10)%>%
release("specialist"),
trajectory() %>%
seize("specialist")%>%
timeout(5)%>%
release("specialist")) %>%
synchronize(wait=TRUE)
set.seed(0)
lab <- simmer("lab") %>%
add_resource("specialist",2) %>%
add_generator("Sample",sample, at(rep(0,times=2))) %>%
run(100)
get_mon_arrivals(lab)
get_mon_resources(lab)
install.packages("simmer.bricks")
vignette(package = "simmer.bricks")
add_dataframe()
arrival_time <- rexp(10,0.4)
arrival_time
arrival_time <- rexp(10,30)
arrival_time
arrival_time <- rexp(10,10^-2)
arrival_time
arrival_time <- rexp(10,10^-2)
arrival_time <- rexp(10,10^-2)
set.seed(0)
lab <- simmer("lab") %>%
add_resource("specialist",2) %>%
#add_resource("pH_meter",1) %>%
add_generator("Sample",sample, at(arrival_time)) %>%
run()
get_mon_resources(lab)
set.seed(0)
arrival_time <- rexp(10,10^-2)
get_mon_resources(lab)
at(0)
?add_resource
pH <- trajectory("pH") %>%
seize("specialist",1) %>%
seize("pH_meter",1) %>%
timeout(10) %>%
release("pH_meter",1) %>%
release("specialist",1)
cond <- trajectory("cond") %>%
seize("specialist",1) %>%
seize("cond_meter",1) %>%
timeout(5) %>%
release("cond_meter",1) %>%
release("specialist",1)
set.seed(0)
lab <- simmer("lab") %>%
add_resource("specialist",2) %>%
add_resource("pH_meter",1) %>%
add_resource("cond_meter",1) %>%
add_resource("sample",3) %>%
add_generator("sample",pH, at(rep(0,times=3))) %>%
add_generator("sample",pH, at(rep(0,times=3))) %>%
run()
get_mon_arrivals(lab)
get_mon_resources(lab)
library(RSQLite)
?RSQLite::`dbConnect,SQLiteConnection-method`
url <- "/home/tomi/.mozilla/firefox/i0yzoyfm.default/places.sqlite"
mydb <- dbConnect(RSQLite::SQLite(), url)
?dbConnect
mydb <- dbConnect(RSQLite::SQLite(), url, synchronous = NULL)
RSQLite::dbGetRowCount(mydb)
dbGetInfo(mydb)
dbReadTable(mydb)
dbReadTable(mydb,"nemtom")
url <- "places.sqlite"
mydb <- dbConnect(RSQLite::SQLite(), url, synchronous = NULL)
dbReadTable(mydb)
dbReadTable(mydb,"fierfox")
dbReadTable(mydb,"firefox")
dbReadTable(mydb,"bookmarks")
dbReadTable(mydb,"bookmark")
install.packages("incidence")
install.packages("outbreaks")
library(outbreaks)
data("ebola_sim_clean")
str(ebola_sim_clean)
names(ebola_sim_clean$linelist)
inc<-incidence(ebola_sim_clean$linelist$date_of_onset, interval=7, groups=ebola_sim_clean$linelist$hospital)
library(incidence)
inc<-incidence(ebola_sim_clean$linelist$date_of_onset, interval=7, groups=ebola_sim_clean$linelist$hospital)
plot(inc)
my_theme <- theme_bw(base_size = 12) +
theme(panel.grid.minor = element_blank()) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, color = "black"))
library(ggplot2)
my_theme <- theme_bw(base_size = 12) +
theme(panel.grid.minor = element_blank()) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, color = "black"))
plot(i.7.group, border = "white") +
my_theme +
theme(legend.position = c(0.8, 0.75))
plot(inc, border = "white") +
my_theme +
theme(legend.position = c(0.8, 0.75))
plot(inc)
plot(inc, border = "white") +
my_theme +
theme(legend.position = c(0.8, 0.75))
plot(inc)
plot(inc, border = "white")
plot(inc, border = "black")
plot(inc, border = "white")
update.packages()
install.packages(c("AlgDesign", "arules", "backports", "BH", "BiocManager", "broom", "callr", "car", "carData", "caret", "cartography", "caTools", "classInt", "cli", "clipr", "coda", "covr", "curl", "data.table", "DBI", "deSolve", "devtools", "digest", "dlstats", "dobin", "dplyr", "DT", "e1071", "ellipsis", "FactoMineR", "foreach", "gdtools", "geojsonio", "ggplot2", "git2r", "haven", "hexbin", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "imagefluency", "ISOcodes", "iterators", "jpeg", "knitr", "later", "latticeExtra", "leaflet", "leafpop", "limSolve", "lmerTest", "maptools", "markdown", "mime", "multcomp", "multcompView", "network", "numbers", "OpenImageR", "openssl", "openxlsx", "osrm", "partitions", "pillar", "pkgbuild", "pkgconfig", "pkgsearch", "plotly", "plotrix", "plyr", "pracma", "processx", "prodlim", "promises", "protolite", "purrr", "quadprog", "quanteda", "quantreg", "R.oo", "R.utils", "R6", "raster", "rcdk", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "recipes", "rematch2", "reticulate", "rgdal", "rgeos", "RgoogleMaps", "RJSONIO", "rlang", "rmarkdown", "robust", "rodeo", "rosm", "roxygen2", "rpart.plot", "rrcov", "rsconnect", "RSpectra", "RSQLite", "RVAideMemoire", "rversions", "rvest", "satellite", "scales", "selectr", "sf", "shiny", "simmer", "slam", "sna", "sp", "SparseM", "spc", "stringdist", "styler", "sys", "testthat", "tidyr", "tidyverse", "tinytex", "tm", "units", "usethis", "vctrs", "visNetwork", "webshot", "whisker", "writexl", "xfun", "xml2"))
install.packages(c("AlgDesign", "arules", "backports", "BH", "BiocManager", "broom", "callr", "car", "carData", "caret", "cartography", "caTools", "classInt", "cli", "clipr", "coda", "covr", "curl", "data.table", "DBI", "deSolve", "devtools", "digest", "dlstats", "dobin", "dplyr", "DT", "e1071", "ellipsis", "FactoMineR", "foreach", "gdtools", "geojsonio", "ggplot2", "git2r", "haven", "hexbin", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "imagefluency", "ISOcodes", "iterators", "jpeg", "knitr", "later", "latticeExtra", "leaflet", "leafpop", "limSolve", "lmerTest", "maptools", "markdown", "mime", "multcomp", "multcompView", "network", "numbers", "OpenImageR", "openssl", "openxlsx", "osrm", "partitions", "pillar", "pkgbuild", "pkgconfig", "pkgsearch", "plotly", "plotrix", "plyr", "pracma", "processx", "prodlim", "promises", "protolite", "purrr", "quadprog", "quanteda", "quantreg", "R.oo", "R.utils", "R6", "raster", "rcdk", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "recipes", "rematch2", "reticulate", "rgdal", "rgeos", "RgoogleMaps", "RJSONIO", "rlang", "rmarkdown", "robust", "rodeo", "rosm", "roxygen2", "rpart.plot", "rrcov", "rsconnect", "RSpectra", "RSQLite", "RVAideMemoire", "rversions", "rvest", "satellite", "scales", "selectr", "sf", "shiny", "simmer", "slam", "sna", "sp", "SparseM", "spc", "stringdist", "styler", "sys", "testthat", "tidyr", "tidyverse", "tinytex", "tm", "units", "usethis", "vctrs", "visNetwork", "webshot", "whisker", "writexl", "xfun", "xml2"))
install.packages(c("AlgDesign", "arules", "backports", "BH", "BiocManager", "broom", "callr", "car", "carData", "caret", "cartography", "caTools", "classInt", "cli", "clipr", "coda", "covr", "curl", "data.table", "DBI", "deSolve", "devtools", "digest", "dlstats", "dobin", "dplyr", "DT", "e1071", "ellipsis", "FactoMineR", "foreach", "gdtools", "geojsonio", "ggplot2", "git2r", "haven", "hexbin", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "imagefluency", "ISOcodes", "iterators", "jpeg", "knitr", "later", "latticeExtra", "leaflet", "leafpop", "limSolve", "lmerTest", "maptools", "markdown", "mime", "multcomp", "multcompView", "network", "numbers", "OpenImageR", "openssl", "openxlsx", "osrm", "partitions", "pillar", "pkgbuild", "pkgconfig", "pkgsearch", "plotly", "plotrix", "plyr", "pracma", "processx", "prodlim", "promises", "protolite", "purrr", "quadprog", "quanteda", "quantreg", "R.oo", "R.utils", "R6", "raster", "rcdk", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "recipes", "rematch2", "reticulate", "rgdal", "rgeos", "RgoogleMaps", "RJSONIO", "rlang", "rmarkdown", "robust", "rodeo", "rosm", "roxygen2", "rpart.plot", "rrcov", "rsconnect", "RSpectra", "RSQLite", "RVAideMemoire", "rversions", "rvest", "satellite", "scales", "selectr", "sf", "shiny", "simmer", "slam", "sna", "sp", "SparseM", "spc", "stringdist", "styler", "sys", "testthat", "tidyr", "tidyverse", "tinytex", "tm", "units", "usethis", "vctrs", "visNetwork", "webshot", "whisker", "writexl", "xfun", "xml2"))
install.packages(c("AlgDesign", "arules", "backports", "BH", "BiocManager", "broom", "callr", "car", "carData", "caret", "cartography", "caTools", "classInt", "cli", "clipr", "coda", "covr", "curl", "data.table", "DBI", "deSolve", "devtools", "digest", "dlstats", "dobin", "dplyr", "DT", "e1071", "ellipsis", "FactoMineR", "foreach", "gdtools", "geojsonio", "ggplot2", "git2r", "haven", "hexbin", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "imagefluency", "ISOcodes", "iterators", "jpeg", "knitr", "later", "latticeExtra", "leaflet", "leafpop", "limSolve", "lmerTest", "maptools", "markdown", "mime", "multcomp", "multcompView", "network", "numbers", "OpenImageR", "openssl", "openxlsx", "osrm", "partitions", "pillar", "pkgbuild", "pkgconfig", "pkgsearch", "plotly", "plotrix", "plyr", "pracma", "processx", "prodlim", "promises", "protolite", "purrr", "quadprog", "quanteda", "quantreg", "R.oo", "R.utils", "R6", "raster", "rcdk", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "recipes", "rematch2", "reticulate", "rgdal", "rgeos", "RgoogleMaps", "RJSONIO", "rlang", "rmarkdown", "robust", "rodeo", "rosm", "roxygen2", "rpart.plot", "rrcov", "rsconnect", "RSpectra", "RSQLite", "RVAideMemoire", "rversions", "rvest", "satellite", "scales", "selectr", "sf", "shiny", "simmer", "slam", "sna", "sp", "SparseM", "spc", "stringdist", "styler", "sys", "testthat", "tidyr", "tidyverse", "tinytex", "tm", "units", "usethis", "vctrs", "visNetwork", "webshot", "whisker", "writexl", "xfun", "xml2"))
install.packages(c("AlgDesign", "arules", "backports", "BH", "BiocManager", "broom", "callr", "car", "carData", "caret", "cartography", "caTools", "classInt", "cli", "clipr", "coda", "covr", "curl", "data.table", "DBI", "deSolve", "devtools", "digest", "dlstats", "dobin", "dplyr", "DT", "e1071", "ellipsis", "FactoMineR", "foreach", "gdtools", "geojsonio", "ggplot2", "git2r", "haven", "hexbin", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "imagefluency", "ISOcodes", "iterators", "jpeg", "knitr", "later", "latticeExtra", "leaflet", "leafpop", "limSolve", "lmerTest", "maptools", "markdown", "mime", "multcomp", "multcompView", "network", "numbers", "OpenImageR", "openssl", "openxlsx", "osrm", "partitions", "pillar", "pkgbuild", "pkgconfig", "pkgsearch", "plotly", "plotrix", "plyr", "pracma", "processx", "prodlim", "promises", "protolite", "purrr", "quadprog", "quanteda", "quantreg", "R.oo", "R.utils", "R6", "raster", "rcdk", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "recipes", "rematch2", "reticulate", "rgdal", "rgeos", "RgoogleMaps", "RJSONIO", "rlang", "rmarkdown", "robust", "rodeo", "rosm", "roxygen2", "rpart.plot", "rrcov", "rsconnect", "RSpectra", "RSQLite", "RVAideMemoire", "rversions", "rvest", "satellite", "scales", "selectr", "sf", "shiny", "simmer", "slam", "sna", "sp", "SparseM", "spc", "stringdist", "styler", "sys", "testthat", "tidyr", "tidyverse", "tinytex", "tm", "units", "usethis", "vctrs", "visNetwork", "webshot", "whisker", "writexl", "xfun", "xml2"))
install.packages(c("AlgDesign", "arules", "backports", "BH", "BiocManager", "broom", "callr", "car", "carData", "caret", "cartography", "caTools", "classInt", "cli", "clipr", "coda", "covr", "curl", "data.table", "DBI", "deSolve", "devtools", "digest", "dlstats", "dobin", "dplyr", "DT", "e1071", "ellipsis", "FactoMineR", "foreach", "gdtools", "geojsonio", "ggplot2", "git2r", "haven", "hexbin", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "imagefluency", "ISOcodes", "iterators", "jpeg", "knitr", "later", "latticeExtra", "leaflet", "leafpop", "limSolve", "lmerTest", "maptools", "markdown", "mime", "multcomp", "multcompView", "network", "numbers", "OpenImageR", "openssl", "openxlsx", "osrm", "partitions", "pillar", "pkgbuild", "pkgconfig", "pkgsearch", "plotly", "plotrix", "plyr", "pracma", "processx", "prodlim", "promises", "protolite", "purrr", "quadprog", "quanteda", "quantreg", "R.oo", "R.utils", "R6", "raster", "rcdk", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "recipes", "rematch2", "reticulate", "rgdal", "rgeos", "RgoogleMaps", "RJSONIO", "rlang", "rmarkdown", "robust", "rodeo", "rosm", "roxygen2", "rpart.plot", "rrcov", "rsconnect", "RSpectra", "RSQLite", "RVAideMemoire", "rversions", "rvest", "satellite", "scales", "selectr", "sf", "shiny", "simmer", "slam", "sna", "sp", "SparseM", "spc", "stringdist", "styler", "sys", "testthat", "tidyr", "tidyverse", "tinytex", "tm", "units", "usethis", "vctrs", "visNetwork", "webshot", "whisker", "writexl", "xfun", "xml2"))
install.packages(c("cartography", "geojsonio", "leafpop", "openssl", "osrm", "protolite", "rgdal", "rgeos", "sf", "units"))
q()
exit
q()
rpois(10,0.5)
rpois(100,0.5)
rpois(100,5)
rpois(100,50)
hist(rpois(100,50))
hist(rpois(10,50))
hist(rpois(1000,50))
hist(rpois(1000,0.5))
hist(rpois(1000,5))
rexp(1000,5)
hist(rexp(1000,5))
hist(rexp(1000,50))
hist(10000*rexp(1000,50))
hist(rnorm(1000, 500, 50))
hist(rnorm(1000, 500, 200))
hist(rnorm(1000, 500, 100))
rnorm(10000, 500, 100)
hist(rnorm(10000, 500, 100))
hist(rnorm(1000, 5000, 100))
hist(rnorm(1000, 5000, 1000))
hist(10^5*rnorm(1000, 5, 1))
hist(10^4*rnorm(1000, 5, 1))
rbinom(10,0,1)
?rbinom
rbinom(10, 10, 0.5)
rbinom(1, 10, 0.5)
rbinom(10, 1, 0.5)
rbinom(10, 0, 0.5)
rbinom(c(0,1), 10, 0.5)
rbinom(10, 1, 0.5)
rbinom(10, 1, 0.5)
canc <- sapply(pop, function(x) sum(rbinom(x, 1, 0.01)))
set.seed(0)
pop <- 10^4*rnorm(1000, 5, 1)
canc <- sapply(pop, function(x) sum(rbinom(x, 1, 0.01)))
hist(pop)
hist(canc)
plot(canc~pop)
plot(canc~pop)
plot(I(canc/pop)~pop)
plot(I(canc/pop)~pop))
plot(I(canc/pop)~pop)
set.seed(0)
pop <- 10^4*rnorm(1000, 5, 2)
canc <- sapply(pop, function(x) sum(rbinom(x, 1, 0.01)))
set.seed(0)
pop <- 10^4*rnorm(1000, 5, 2)
canc <- sapply(pop, function(x) sum(rbinom(x, 1, 0.01)))
hist(pop)
pop <- max(10^4*rnorm(1000, 5, 2),0)
hist(pop)
pop <- 10^4*rnorm(1000, 5, 1)
hist(pop)
set.seed(0)
pop <- 10^4*rnorm(1000, 5, 1)
hist(pop)
min(pop)
rpois(1000,5)
hist(rpois(1000,5))
hist(rpois(1000,4))
hist(rpois(1000,3))
hist(rpois(1000,3))
hist(rpois(1000,2))
hist(rpois(1000,2.5))
hist(rpois(1000,3))
hist(rpois(1000,3))
hist(rpois(1000,3))
pop <- 10^4*rpois(1000, 3)
hist(pop)
canc <- sapply(pop, function(x) sum(rbinom(x, 1, 0.01)))
plot(I(canc/pop)~pop)
plot(canc~pop)
plot(I(canc/pop)~pop))
plot(I(canc/pop)~pop)
set.seed(0)
pop <- rpois(1000, 3*10^4)
hist(pop)
canc <- sapply(pop, function(x) sum(rbinom(x, 1, 0.01)))
canc <- sapply(pop, function(x) sum(rbinom(x, 1, 0.01)))
plot(I(canc/pop)~pop)
plot(I(canc/pop)~pop)
set.seed(0)
pop <- 10^4*rpois(1000, 3)
canc <- sapply(pop, function(x) sum(rbinom(x, 1, 0.01)))
canc <- sapply(pop, function(x) sum(rbinom(x, 1, 0.01)))
plot(I(canc/pop)~pop)
anova(lm(canc~pop))
anova(lm(I(canc/pop)~pop))
data <- read.csv("env_air_gge_1_Data.csv", header = TRUE)
View(data)
libryr(dplyr)
library(dplyr)
filter(data, TIME == 2017)
filter(data, TIME == 2008)
unique(data$AIRPOL)
filter(data, TIME == 2008, AIRPOL == "Carbon dioxide")
unique(data$SRC_CRF)
filter(data,
TIME == 2008,
AIRPOL == "Carbon dioxide",
SRC_CF %in% c("Energy",
"All sectors and indirect CO2 (excluding LULUCF and memo items, including international aviation)"))
filter(data,
TIME == 2008,
AIRPOL == "Carbon dioxide",
SRC_CRF %in% c("Energy",
"All sectors and indirect CO2 (excluding LULUCF and memo items, including international aviation)"))
data2 <- filter(data,
TIME == 2008,
AIRPOL == "Carbon dioxide",
SRC_CRF %in% c(
"Energy",
"All sectors and indirect CO2 (excluding LULUCF and memo items, including international aviation)"))
View(data2)
sapply(unique(data2$GEO, function(x) data2$Value[data2$TIME == 2017 & data2$GEO == x]/data2$Value[data2$TIME == 2017 & data2$GEO == "European Union - 28 countries"])
sapply(unique(data2$GEO),
unique(data2$GEO)
sapply(unique(data2$GEO),function(x) data2$Value[data2$TIME == 2017 & data2$GEO == x]/data2$Value[data2$TIME == 2017 & data2$GEO == "European Union - 28 countries"])
class(data2$TIME)
class(data2$Value)
as.numeric(data2$Value)
data2$Value
as.numeric(as.character(data2$Value))
as.numeric(gsub(",","",data2$Value))
sapply(unique(data2$GEO),function(x) as.numeric(gsub(",","",data2$Value[data2$TIME == 2017 & data2$GEO == x]))/as.numeric(gsub(",","",data2$Value[data2$TIME == 2017 & data2$GEO == "European Union - 28 countries"])))
data2$Value <- as.numeric(gsub(",","",data2$Value))
data2$Value
data2$Value <- as.numeric(gsub(",","",data2$Value))
sapply(unique(data2$GEO),function(x) data2$Value[data2$TIME == 2017 & data2$GEO == x]/data2$Value[data2$TIME == 2017 & data2$GEO == "European Union - 28 countries"])
data2$Value <- as.numeric(gsub(",","",data2$Value))
sapply(unique(data2$GEO),function(x) data2$Value[data2$TIME == 2017 & data2$GEO == x])
unique(data2$GEO)
data <- read.csv("env_air_gge_1_Data.csv", header = TRUE, stringsAsFactors = FALSE)
data2 <- filter(data,
TIME == 2008,
AIRPOL == "Carbon dioxide",
SRC_CRF %in% c(
"Energy",
"All sectors and indirect CO2 (excluding LULUCF and memo items, including international aviation)"))
data2$Value <- as.numeric(gsub(",","",data2$Value))
sapply(unique(data2$GEO),function(x) data2$Value[data2$TIME == 2017 & data2$GEO == x]/data2$Value[data2$TIME == 2017 & data2$GEO == "European Union - 28 countries"])
data2$Value <- as.numeric(gsub(",","",data2$Value))
sapply(unique(data2$GEO),function(x) data2$Value[data2$TIME == 2017 & data2$GEO == x])
data2$Value
data2$TIME
data2 <- filter(data,
TIME %in% c(2008, 2017),
AIRPOL == "Carbon dioxide",
SRC_CRF %in% c(
"Energy",
"All sectors and indirect CO2 (excluding LULUCF and memo items, including international aviation)"))
data2$Value <- as.numeric(gsub(",","",data2$Value))
sapply(unique(data2$GEO),function(x) data2$Value[data2$TIME == 2017 & data2$GEO == x]/data2$Value[data2$TIME == 2017 & data2$GEO == "European Union - 28 countries"])
data2$SRC_CRF
data2$Value <- as.numeric(gsub(",","",data2$Value))
sapply(unique(data2$GEO),function(x) data2$Value[data2$TIME == 2017 & data2$GEO == x & data2$SRC_CRF = "Energy"]/data2$Value[data2$TIME == 2017 & data2$GEO == x & data2$SRC_CRF = "All sectors and indirect CO2 (excluding LULUCF and memo items, including international aviation)"])
data2$Value <- as.numeric(gsub(",","",data2$Value))
sapply(unique(data2$GEO),function(x) data2$Value[data2$TIME == 2017 & data2$GEO == x & data2$SRC_CRF = "Energy"]/data2$Value[data2$TIME == 2017 & data2$GEO == x & data2$SRC_CRF == "All sectors and indirect CO2 (excluding LULUCF and memo items, including international aviation)"])
data2$Value <- as.numeric(gsub(",","",data2$Value))
sapply(unique(data2$GEO),function(x) data2$Value[data2$TIME == 2017 & data2$GEO == x & data2$SRC_CRF == "Energy"]/data2$Value[data2$TIME == 2017 & data2$GEO == x & data2$SRC_CRF == "All sectors and indirect CO2 (excluding LULUCF and memo items, including international aviation)"])
sort(sapply(unique(data2$GEO),function(x) data2$Value[data2$TIME == 2017 & data2$GEO == x & data2$SRC_CRF == "Energy"]/data2$Value[data2$TIME == 2017 & data2$GEO == x & data2$SRC_CRF == "All sectors and indirect CO2 (excluding LULUCF and memo items, including international aviation)"]))
plot(sort(sapply(unique(data2$GEO),function(x) data2$Value[data2$TIME == 2017 & data2$GEO == x & data2$SRC_CRF == "Energy"]/data2$Value[data2$TIME == 2017 & data2$GEO == x & data2$SRC_CRF == "All sectors and indirect CO2 (excluding LULUCF and memo items, including international aviation)"])))
data2$Value <- as.numeric(gsub(",","",data2$Value))
sort(sapply(unique(data2$GEO),function(x) data2$Value[data2$TIME == 2017 & data2$GEO == x & data2$SRC_CRF == "Energy"]/data2$Value[data2$TIME == 2017 & data2$GEO == x & data2$SRC_CRF == "All sectors and indirect CO2 (excluding LULUCF and memo items, including international aviation)"]))
data2$Value <- as.numeric(gsub(",","",data2$Value))
res <- sort(sapply(unique(data2$GEO),function(x) data2$Value[data2$TIME == 2017 & data2$GEO == x & data2$SRC_CRF == "Energy"]/data2$Value[data2$TIME == 2017 & data2$GEO == x & data2$SRC_CRF == "All sectors and indirect CO2 (excluding LULUCF and memo items, including international aviation)"]))
which(names(res) == "Ireland")
length(res)
res
install.packages("afex")
install.packages("BH")
install.packages("blob")
install.packages("cartography")
install.packages("rgeos")
install.packages(c("caTools", "cli", "DiagrammeR", "FactoMineR", "fansi", "farver"))
install.packages(c("gdalUtils", "geojsonio", "hms", "imagefluency", "knitr", "leafpop", "leaps", "ModelMetrics", "multcomp", "mvtnorm", "openssl", "osrm", "prettyunits", "pROC", "protolite", "rgdal", "RgoogleMaps", "RJSONIO", "rmarkdown", "rrcov", "Rttf2pt1", "sf", "shinyjs", "SQUAREM", "stringi", "tinytex", "units", "V8", "vcd", "xfun", "XML", "zoo"))
install.packages("gdalUtils")
install.packages("geojsonio")
install.packages("rgeos")
install.packages("rgeos")
install.packages("gdalUtils")
install.packages("gdalUtils")
install.packages("gdalUtils")
install.packages("rgal")
install.packages("rgdal")
install.packages("gdalUtils")
install.packages("rgdal")
install.packages(c("cartography", "gdalUtils", "geojsonio", "leafpop", "openssl", "osrm", "protolite", "RCurl", "rgdal", "sf", "units", "V8"))
install.packeges("units")
install.packages("units")
install.packages("units")
install.packages(c("leafpop", "osrm"))
install.packages("sf")
install.packages("protolite")
install.packages("protolite")
install.packages("protolite")
exit
q()
library(devtools)
load_all()
ls()
rm(list=ls())
ls()
help(".Rprofile")
q()
library(units)
a=1
a<-set_units(a, mAh)
a<-set_units(a, Ah)
valid_udunits()
head(valid_udunits())
a<-set_units(a, m*A*h)
a
a<-set_units(a, A*h)
rm(a)
a<-set_units(1, A*h)
a
q()
a = 2
plot(cars)
probit(0.5)
?probit
??probit
x=1:100
y=0.2*x+1+rnorm(100,0,0.1)
plot(y~x)
y2=1/(1-y)
plot(y2~x)
plot(y~x)
plot(y2~x)
plot(y~x)
y2=ln(1/(1-y))
y2=logb(1/(1-y))
exp(1)
y2=log(1/(1-y), exp(1))
y2
y=1=(1+exp(x)
)
y=1/(1+exp(x))
plot(y~x)
y=1/(1+exp(0.1*x))
plot(y~x)
y=1/(1+exp(0.1*(x-10))
)
y=1/(1+exp(0.1*(x-10))
)
plot(y~x)
y=1/(2+exp(0.1*(x-10)))
plot(y~x)
y=1/(10+exp(0.1*(x-10)))
plot(y~x)
y=1/(1+exp(0.1*(x-10)))
plot(y~x)
y=1/(1+exp(0.01*(x-10)))
plot(y~x)
y=1/(1+exp(0.05*(x-10)))
plot(y~x)
y=1/(1+exp(0.1*(x-10)))
plot(y~x)
y=1/(1+exp(0.1*(x-100)))
plot(y~x)
y=1/(1+exp(0.1*(x-50)))
plot(y~x)
y2=logb(y)
plot(y2~x)
y2=logb(1/(1-y))
plot(y2~x)
plot(y~x)
y2=logb(1/(1-y))
plot(y~x)
plot(y2~x)
pi
pi()
chooser(c("A","B","C"),"all)"
)
sample(1,1:20)
sample(1,1:20)
sample(1:20)
sample(1:20,1)
library(devtools
)
load_all("../webchem")
getwd()
load_all("./Documents/programozas/webchem")
library(testthat)
setwd("~/Documents/programozas/webchem_paper")
test_file("./Code/code.R")
dir()
test_file("./revision3_2581/Code/code.R")
install.packages("webchem")
test_file("./revision3_2581/Code/code.R")
install.packages("webchem")
test_file("./revision3_2581/Code/code.R")
apikey
exists(apikey)
exists("apikey")
test_file("./revision3_2581/Code/code.R")
